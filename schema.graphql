type EventCollection @entity {
  # launcher contract address
  id: ID!
  chaindId: BigInt!
  poolm: String!
  launcher: String!
  hookLock: String!
  numberPoolsV4: BigInt!
  numberLocks: BigInt!
}

type Pool @entity {
  # poolId of v4 pool
  id: ID!
  currency0: Token!
  currency1: Token!
  fee: Int!
  clockhook: Bytes!
  locks: [Lock!]! @derivedFrom(field: "pool")
}

type Lock @entity {
  # nft token Id
  id: ID!
  unlockDate: BigInt!
  amount0: BigInt!
  amount1: BigInt!
  liquidity: BigInt!
  pool: Pool!
  currency0: Token!
  currency1: Token!
  owner: Wallet!
}

type InitializeEvent @entity(immutable: true) {
  id: Bytes!
  poolId: Bytes! # bytes32
  currency0: Bytes! # address
  currency1: Bytes! # address
  fee: Int! # uint24
  clockhook: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Wallet @entity {
  # User Wallet Address
  id: ID!
  numberDeploymentsPool: BigInt!
  locks: [Lock!]! @derivedFrom(field: "owner")
}

type Token @entity {
  # Smart contract address of the token
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type DecreaseLiquidityEvent @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  liquidity: BigInt! # uint128
  removedAmount0: BigInt! # uint256
  removedAmount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExtendLockEvent @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  unlockDate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LiquidityAddedEvent @entity(immutable: true) {
  id: Bytes!
  poolId: Bytes! # bytes32
  tokenId: BigInt! # uint256
  liquidity: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  unlockDate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Donate @entity(immutable: true) {
  id: Bytes!
  CLPoolManager_id: Bytes! # bytes32
  sender: Bytes! # address
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  tick: Int! # int24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DynamicLPFeeUpdated @entity(immutable: true) {
  id: Bytes!
  CLPoolManager_id: Bytes! # bytes32
  dynamicLPFee: Int! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CLPoolManagerInitialize @entity(immutable: true) {
  id: Bytes!
  CLPoolManager_id: Bytes! # bytes32
  currency0: Bytes! # address
  currency1: Bytes! # address
  hooks: Bytes! # address
  fee: Int! # uint24
  parameters: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModifyLiquidity @entity(immutable: true) {
  id: Bytes!
  CLPoolManager_id: Bytes! # bytes32
  sender: Bytes! # address
  tickLower: Int! # int24
  tickUpper: Int! # int24
  salt: Bytes! # bytes32
  liquidityDelta: BigInt! # int256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PausableRoleGranted @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PausableRoleRevoked @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeControllerUpdated @entity(immutable: true) {
  id: Bytes!
  protocolFeeController: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeUpdated @entity(immutable: true) {
  id: Bytes!
  CLPoolManager_id: Bytes! # bytes32
  protocolFee: Int! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  CLPoolManager_id: Bytes! # bytes32
  sender: Bytes! # address
  amount0: BigInt! # int128
  amount1: BigInt! # int128
  sqrtPriceX96: BigInt! # uint160
  liquidity: BigInt! # uint128
  tick: Int! # int24
  fee: Int! # uint24
  protocolFee: Int! # uint24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Data @entity(timeseries: true) {
  id: Int8!
  timestamp: Timestamp!
  amount0: BigInt!
  amount1: BigInt!
  liquidity: BigInt!
}

type Stats @aggregation(intervals: ["hour", "day"], source: "Data") {
  id: Int8!
  timestamp: Timestamp!
  sumAmount0: BigInt! @aggregate(fn: "sum", arg: "amount0")
  sumAmount1: BigInt! @aggregate(fn: "sum", arg: "amount1")
  sumliquidity: BigInt! @aggregate(fn: "sum", arg: "liquidity")
  countLiquidityAdded: Int8! @aggregate(fn: "count", cumulative: true)
}

###########################
#### Fulltext Searches ####
###########################

type _Schema_
  @fulltext(
    name: "tokenSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Token"
        fields: [{ name: "symbol" }, { name: "name" }, { name: "id" }]
      }
    ]
  )
